Balanced Partition:

blog solution

Blog Link - http://qr.ae/TUpvbx

Basically the idea is that the problem is much easier to solve if the question asked us to draw a vertical line. Sort the points by their x coordinate, and then maintain a prefix sum array on weights. 

Then, for each i, check if 

2S[i - 1] = S[n] - S[i], and
2S[i] = S[n]

To reduce it to this problem we rotate the whole plane by 45 degrees. (x, y) becomes (x - y, x + y). Ignore the scaling factor of root(2).

--------------------------------

void solve()
{
    int no_of_houses;
    scanf("%d", &no_of_houses);

    map <int, int> no_of_people_at_x;

    for(int i = 1; i <= no_of_houses; i++)
    {
        int x, y, no_of_people;
        scanf("%d %d %d", &x, &y, &no_of_people);

        int new_x = x - y; //new_y = x + y

        no_of_people_at_x[new_x] += no_of_people;
    }

    vector <int> sum_till;
    sum_till.push_back(0);

    const int oo = 2e3;
    int first_x = -oo, last_x = oo;

    for(int x = first_x; x <= last_x; x++)
    {
        if(no_of_people_at_x.find(x) != no_of_people_at_x.end())
        {
            int sum_till_here = sum_till.back() + no_of_people_at_x[x];

            sum_till.push_back(sum_till_here);
        }
    }

    int total_sum = sum_till.back();

    int partition_possible = false;
    for(int i = 1; i < sum_till.size(); i++)
    {
        if(sum_till[i] == total_sum - sum_till[i])
            partition_possible = true;

        // Line passes through house i, so it neither falls left nor right.
        if(sum_till[i - 1] == total_sum - sum_till[i])
            partition_possible = true;
    }

    printf(partition_possible ? "YES\n" : "NO\n");
}



Editors solution:
#include "bits/stdc++.h"
using namespace std;
struct ${$(){ios_base::sync_with_stdio(0);cin.tie(0);}}$;

const int X = 1000;
const int off = 2 * X + 50;

string solve(vector<pair <int, int> > a) {
   
   vector <int> sum(4 * off);
   
   for(auto e: a) 
      sum[e.first + off] += e.second;
   
   int all = accumulate(sum.begin(), sum.end(), 0LL);
   bool ok = false;
   
   for(int i = 1; i < sum.size(); i++) {
      sum[i] += sum[i - 1];
      ok |= (2 * sum[i] == all);
      ok |= (sum[i - 1] == all - sum[i]);
   }
   return ok? "YES": "NO";
}


int main() {
   int t, n, x, y, h;
   cin >> t;
   while(t--) {
      cin >> n;
      vector <pair <int, int> > v(n);
      
      for(int i = 0; i < n; i++) {
         cin >> x >> y >> h;
         v[i] = {x - y, h};
      }

      sort(v.begin(), v.end());
      cout << solve(v) << endl;
   }   

   return 0;
}